plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.7'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.23.3'
	id 'com.google.cloud.tools.jib' version '3.4.3'
}

group = 'TokenUs'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	//mySQL 사용시 주석 해제
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.mysql:mysql-connector-j'

	//테스트
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'io.rest-assured:rest-assured:5.3.1'
	testRuntimeOnly 'com.h2database:h2'

	// .env 사용
	implementation 'io.github.cdimascio:java-dotenv:5.2.2'

	implementation 'org.springframework.boot:spring-boot-starter-validation'
}

//jar파일 설정
jar {
	enabled = false
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('installLocalGitHook', Copy) {
	from("${rootProject.rootDir}/.github/hooks")
	into("${rootProject.rootDir}/.git/hooks")

	eachFile {
		mode = 0755
	}

	onlyIf {
		!file("${rootProject.rootDir}/.git/hooks/pre-commit").exists()
	}

	doLast {
		println 'pre-commit 훅이 성공적으로 설치되었습니다.'
	}
}

spotless {
	java {
		googleJavaFormat().aosp() // Google Java 포맷 적용
		importOrder(
				'java|javax|jakarta',
				'org.springframework',
				'lombok',
				'',
				'org.junit|org.mockito',
				'\\#',
				'\\#org.junit'
		) // 이 순서로 import문 정렬
		removeUnusedImports() // 사용하지 않는 import문 제거
		trimTrailingWhitespace() // 각 라인 끝의 공백 제거
		endWithNewline() // 파일 끝에 항상 새로운 줄 추가
		formatAnnotations() // 어노테이션 정렬
	}
}

tasks.named('compileJava') {
	dependsOn 'installLocalGitHook'
	dependsOn 'spotlessApply'
}

jib {
	from {
		image = 'openjdk:17-alpine'
	}
	to {
		image = 'tokenus-image'
		tags = ['latest']
	}
	container {
		jvmFlags = ['-Xms512m']
		format = 'Docker'
		creationTime = 'USE_CURRENT_TIMESTAMP'
	}
}